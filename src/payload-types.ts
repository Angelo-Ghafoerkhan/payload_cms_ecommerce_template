/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    faqs: Faq;
    galleries: Gallery;
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    products: Product;
    orders: Order;
    discounts: Discount;
    carts: Cart;
    'product-categories': ProductCategory;
    'product-images': ProductImage;
    shipping: Shipping;
    subscriptions: Subscription;
    subscriptionOrders: SubscriptionOrder;
    plans: Plan;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    faqs: FaqsSelect<false> | FaqsSelect<true>;
    galleries: GalleriesSelect<false> | GalleriesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    discounts: DiscountsSelect<false> | DiscountsSelect<true>;
    carts: CartsSelect<false> | CartsSelect<true>;
    'product-categories': ProductCategoriesSelect<false> | ProductCategoriesSelect<true>;
    'product-images': ProductImagesSelect<false> | ProductImagesSelect<true>;
    shipping: ShippingSelect<false> | ShippingSelect<true>;
    subscriptions: SubscriptionsSelect<false> | SubscriptionsSelect<true>;
    subscriptionOrders: SubscriptionOrdersSelect<false> | SubscriptionOrdersSelect<true>;
    plans: PlansSelect<false> | PlansSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
    settings: Setting;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    settings: SettingsSelect<false> | SettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faqs".
 */
export interface Faq {
  id: number;
  title: string;
  questions?:
    | {
        question: string;
        answer: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        answer_html?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "galleries".
 */
export interface Gallery {
  id: number;
  name: string;
  text: string;
  images: (number | Media)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact' | 'splitVisual';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null)
              | ({
                  relationTo: 'product-categories';
                  value: number | ProductCategory;
                } | null)
              | ({
                  relationTo: 'products';
                  value: number | Product;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'secondary' | 'dark' | 'outline') | null;
            showIcon?: boolean | null;
            icon?: {
              source?: ('lucide' | 'upload') | null;
              color?: string | null;
              size?: number | null;
              name?: string | null;
              upload?: (number | null) | Media;
            };
          };
          id?: string | null;
        }[]
      | null;
    alignContent?: ('left' | 'center' | 'right') | null;
    media?: (number | null) | Media;
    imageAnnotation?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  layout: (
    | CallToActionBlock
    | CategoryShowcase
    | ContactSectionBlock
    | ContentBlock
    | {
        faqs: number | Faq;
        animation?: {
          enabled?: boolean | null;
          trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
          type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
          threshold?: number | null;
          duration?: number | null;
          delay?: number | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'faqBlock';
      }
    | {
        title?: string | null;
        gallery: number | Gallery;
        animation?: {
          enabled?: boolean | null;
          trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
          type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
          threshold?: number | null;
          duration?: number | null;
          delay?: number | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'gallery';
      }
    | GoogleMapBlock
    | ImageOverlayCTA
    | ImageWithTextBlock
    | LogoCarousel
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | {
        items?:
          | {
              richText?: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              id?: string | null;
            }[]
          | null;
        animation?: {
          enabled?: boolean | null;
          trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
          type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
          threshold?: number | null;
          duration?: number | null;
          delay?: number | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'stepItemGrid';
      }
    | {
        tabPosition?: ('left' | 'middle' | 'right') | null;
        initialTab?: number | null;
        allowUrlControls?: boolean | null;
        tabs?:
          | {
              title: string;
              type?: ('content' | 'link') | null;
              content?:
                | (
                    | CallToActionBlock
                    | ContentBlock
                    | {
                        faqs: number | Faq;
                        animation?: {
                          enabled?: boolean | null;
                          trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
                          type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
                          threshold?: number | null;
                          duration?: number | null;
                          delay?: number | null;
                        };
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'faqBlock';
                      }
                    | {
                        title?: string | null;
                        gallery: number | Gallery;
                        animation?: {
                          enabled?: boolean | null;
                          trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
                          type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
                          threshold?: number | null;
                          duration?: number | null;
                          delay?: number | null;
                        };
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'gallery';
                      }
                    | ImageWithTextBlock
                    | MediaBlock
                    | FormBlock
                    | {
                        items?:
                          | {
                              richText?: {
                                root: {
                                  type: string;
                                  children: {
                                    type: string;
                                    version: number;
                                    [k: string]: unknown;
                                  }[];
                                  direction: ('ltr' | 'rtl') | null;
                                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                                  indent: number;
                                  version: number;
                                };
                                [k: string]: unknown;
                              } | null;
                              id?: string | null;
                            }[]
                          | null;
                        animation?: {
                          enabled?: boolean | null;
                          trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
                          type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
                          threshold?: number | null;
                          duration?: number | null;
                          delay?: number | null;
                        };
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'stepItemGrid';
                      }
                  )[]
                | null;
              link?: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: number | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: number | Post;
                    } | null)
                  | ({
                      relationTo: 'product-categories';
                      value: number | ProductCategory;
                    } | null)
                  | ({
                      relationTo: 'products';
                      value: number | Product;
                    } | null);
                url?: string | null;
                /**
                 * Choose how the link should be rendered.
                 */
                appearance?: 'default' | null;
              };
              id?: string | null;
            }[]
          | null;
        animation?: {
          enabled?: boolean | null;
          trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
          type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
          threshold?: number | null;
          duration?: number | null;
          delay?: number | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'tabsBlock';
      }
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (number | Post)[] | null;
  categories?: (number | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  role?: ('admin' | 'customer') | null;
  stripeCustomerId?: string | null;
  cart?: (number | null) | Cart;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carts".
 */
export interface Cart {
  id: number;
  customer: number | User;
  lineItems?:
    | {
        product: number | Product;
        productVariant?: string | null;
        quantity: number;
        linePrice: number;
        id?: string | null;
      }[]
    | null;
  /**
   * Total cost of the cart
   */
  total: number;
  discountCode?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: number;
  name: string;
  productType: 'standard' | 'variable';
  slug?: string | null;
  slugLock?: boolean | null;
  url?: string | null;
  primaryCategory: number | ProductCategory;
  categories?: (number | ProductCategory)[] | null;
  /**
   * This is the small product description, this will be used on category pages and below the "Add to Cart" button.
   */
  introDescription?: string | null;
  /**
   * This is the main product description, this will be below the product.
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  price?: number | null;
  stock?: number | null;
  images?: (number | ProductImage)[] | null;
  variants?:
    | {
        variantName: string;
        sku: string;
        price: number;
        stock: number;
        image?: (number | null) | ProductImage;
        id?: string | null;
      }[]
    | null;
  specifications?: {
    specs?:
      | {
          label: string;
          value: string;
          id?: string | null;
        }[]
      | null;
  };
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | ProductImage;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-categories".
 */
export interface ProductCategory {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  url?: string | null;
  parent?: (number | null) | ProductCategory;
  breadcrumbs?:
    | {
        doc?: (number | null) | ProductCategory;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-images".
 */
export interface ProductImage {
  id: number;
  text?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null)
            | ({
                relationTo: 'product-categories';
                value: number | ProductCategory;
              } | null)
            | ({
                relationTo: 'products';
                value: number | Product;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
          showIcon?: boolean | null;
          icon?: {
            source?: ('lucide' | 'upload') | null;
            color?: string | null;
            size?: number | null;
            name?: string | null;
            upload?: (number | null) | Media;
          };
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categoryShowcase".
 */
export interface CategoryShowcase {
  category: number | ProductCategory;
  /**
   * Number of products to display in this category
   */
  limit?: number | null;
  /**
   * Show the category title above the products
   */
  showTitle?: boolean | null;
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'categoryShowcase';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactSectionBlock".
 */
export interface ContactSectionBlock {
  id?: string | null;
  blockName?: string | null;
  blockType: 'contactSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        contentType?: ('text' | 'block') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        block?:
          | (
              | ContactSectionBlock
              | FormBlock
              | GoogleMapBlock
              | ImageLinkBlock
              | ImageWithTextOverlayBlock
              | InfoCardBlock
              | MediaBlock
              | ReviewCard
              | StaffImageSpielBlock
              | SubscriptionPlanBlock
              | SingleProduct
            )[]
          | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null)
            | ({
                relationTo: 'product-categories';
                value: number | ProductCategory;
              } | null)
            | ({
                relationTo: 'products';
                value: number | Product;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'secondary' | 'dark' | 'outline') | null;
          showIcon?: boolean | null;
          icon?: {
            source?: ('lucide' | 'upload') | null;
            color?: string | null;
            size?: number | null;
            name?: string | null;
            upload?: (number | null) | Media;
          };
        };
        id?: string | null;
      }[]
    | null;
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GoogleMapBlock".
 */
export interface GoogleMapBlock {
  /**
   * Click “Share” in Google Maps → “Embed a map” → copy the iframe src.
   */
  mapUrl: string;
  height?: number | null;
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'googleMap';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageLinkBlock".
 */
export interface ImageLinkBlock {
  image: number | Media;
  text: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  link?: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null)
      | ({
          relationTo: 'product-categories';
          value: number | ProductCategory;
        } | null)
      | ({
          relationTo: 'products';
          value: number | Product;
        } | null);
    url?: string | null;
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'secondary' | 'dark' | 'outline') | null;
  };
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageLinkBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageWithTextOverlayBlock".
 */
export interface ImageWithTextOverlayBlock {
  image?: (number | null) | Media;
  text: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  callToAction?: {
    text?: string | null;
    link?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageWithTextOverlayBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InfoCardBlock".
 */
export interface InfoCardBlock {
  icon?: {
    source?: ('lucide' | 'upload') | null;
    color?: string | null;
    size?: number | null;
    name?: string | null;
    upload?: (number | null) | Media;
  };
  title?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoCardBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviewCard".
 */
export interface ReviewCard {
  name: string;
  /**
   * Rating in stars (1 to 5)
   */
  rating: number;
  reviewText: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'reviewCard';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "staffImageSpielBlock".
 */
export interface StaffImageSpielBlock {
  name: string;
  jobTitle: string;
  image: number | Media;
  spiel: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'staffImageSpielBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SubscriptionPlanBlock".
 */
export interface SubscriptionPlanBlock {
  subscriptionPlan?: (number | null) | Plan;
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'subscriptionPlanBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plans".
 */
export interface Plan {
  id: number;
  name: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  description_html?: string | null;
  /**
   * This plain-text description will be sent to Stripe for product details.
   */
  stripeDescription: string;
  productId?: string | null;
  price: number;
  stripePriceId?: string | null;
  /**
   * How often payment is taken for the subscription.
   */
  billingCycle: 'day' | 'week' | 'month' | 'year';
  /**
   * The length of the subscription: 1, 3, 6 or 12 months.
   */
  subscriptionTerm: 'monthly' | 'quarterly' | 'semi-annually' | 'yearly';
  status?: ('active' | 'inactive') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "singleProduct".
 */
export interface SingleProduct {
  product: number | Product;
  id?: string | null;
  blockName?: string | null;
  blockType: 'singleProduct';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageOverlayCTA".
 */
export interface ImageOverlayCTA {
  backgroundImage: number | Media;
  overlay: {
    title: string;
    image: number | Media;
    text?: string | null;
  };
  link: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null)
      | ({
          relationTo: 'product-categories';
          value: number | ProductCategory;
        } | null)
      | ({
          relationTo: 'products';
          value: number | Product;
        } | null);
    url?: string | null;
    label: string;
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'secondary' | 'dark' | 'outline') | null;
    showIcon?: boolean | null;
    icon?: {
      source?: ('lucide' | 'upload') | null;
      color?: string | null;
      size?: number | null;
      name?: string | null;
      upload?: (number | null) | Media;
    };
  };
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageOverlayCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageWithTextBlock".
 */
export interface ImageWithTextBlock {
  meta?: {
    removeTitle?: boolean | null;
    flipImage?: boolean | null;
    primaryBackgroundColor?: boolean | null;
    containImage?: boolean | null;
  };
  title?: string | null;
  images?: (number | Media)[] | null;
  text: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  callToAction?: boolean | null;
  link?: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null)
      | ({
          relationTo: 'product-categories';
          value: number | ProductCategory;
        } | null)
      | ({
          relationTo: 'products';
          value: number | Product;
        } | null);
    url?: string | null;
    label: string;
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'secondary' | 'dark' | 'outline') | null;
    showIcon?: boolean | null;
    icon?: {
      source?: ('lucide' | 'upload') | null;
      color?: string | null;
      size?: number | null;
      name?: string | null;
      upload?: (number | null) | Media;
    };
  };
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageWithTextBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogoCarousel".
 */
export interface LogoCarousel {
  title?: string | null;
  alignTitle?: ('left' | 'center' | 'right') | null;
  duration?: number | null;
  pauseOnHover?: boolean | null;
  images: (number | Media)[];
  animation?: {
    enabled?: boolean | null;
    trigger?: ('onLoad' | 'onComponentLoad' | 'onScroll' | 'onHover') | null;
    type?: ('fade' | 'slideLeft' | 'slideRight' | 'zoom') | null;
    threshold?: number | null;
    duration?: number | null;
    delay?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'logoCarouselBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: number;
  user?: (number | null) | User;
  email?: string | null;
  lineItems?:
    | {
        product: number | Product;
        productVariant?: string | null;
        quantity: number;
        linePrice: number;
        id?: string | null;
      }[]
    | null;
  paymentStatus: 'paid' | 'pending' | 'failed';
  /**
   * Total cost of the order
   */
  total: number;
  paymentMethod: 'creditCard' | 'paypal' | 'bankTransfer';
  paymentDate?: string | null;
  invoice?: {
    url?: string | null;
    stripeId?: string | null;
    transactionId?: string | null;
  };
  orderRef?: string | null;
  address?: {
    line1?: string | null;
    line2?: string | null;
    city?: string | null;
    postCode?: string | null;
  };
  discounts?: {
    discountCode?: string | null;
    discountAmount?: number | null;
  };
  shipping?: {
    trackingUrl?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discounts".
 */
export interface Discount {
  id: number;
  code: string;
  /**
   * Percentage off (e.g. 10 for 10% discount)
   */
  amount: number;
  /**
   * The corresponding Stripe Coupon ID
   */
  stripeCouponId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shipping".
 */
export interface Shipping {
  id: number;
  name: string;
  /**
   * This plain-text description will be sent to Stripe for shipping rate details.
   */
  shippingDescription: string;
  cost: number;
  /**
   * Estimated delivery time, e.g. "3-5 days"
   */
  deliveryEstimate?: string | null;
  shippingRateId?: string | null;
  status?: ('active' | 'inactive') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions".
 */
export interface Subscription {
  id: number;
  user: number | User;
  plan: number | Plan;
  startDate: string;
  endDate?: string | null;
  stripeId?: string | null;
  status: 'active' | 'pending' | 'paused' | 'cancelled';
  orders?: (number | SubscriptionOrder)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptionOrders".
 */
export interface SubscriptionOrder {
  id: number;
  user: number | User;
  subscription: number | Subscription;
  paymentStatus: 'paid' | 'pending' | 'failed';
  amount: number;
  paymentMethod: 'creditCard' | 'paypal' | 'bankTransfer';
  paymentDate?: string | null;
  invoice?: {
    url?: string | null;
    stripeId?: string | null;
    stripeSubscriptionId?: string | null;
    transactionId?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'faqs';
        value: number | Faq;
      } | null)
    | ({
        relationTo: 'galleries';
        value: number | Gallery;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'products';
        value: number | Product;
      } | null)
    | ({
        relationTo: 'orders';
        value: number | Order;
      } | null)
    | ({
        relationTo: 'discounts';
        value: number | Discount;
      } | null)
    | ({
        relationTo: 'carts';
        value: number | Cart;
      } | null)
    | ({
        relationTo: 'product-categories';
        value: number | ProductCategory;
      } | null)
    | ({
        relationTo: 'product-images';
        value: number | ProductImage;
      } | null)
    | ({
        relationTo: 'shipping';
        value: number | Shipping;
      } | null)
    | ({
        relationTo: 'subscriptions';
        value: number | Subscription;
      } | null)
    | ({
        relationTo: 'subscriptionOrders';
        value: number | SubscriptionOrder;
      } | null)
    | ({
        relationTo: 'plans';
        value: number | Plan;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faqs_select".
 */
export interface FaqsSelect<T extends boolean = true> {
  title?: T;
  questions?:
    | T
    | {
        question?: T;
        answer?: T;
        answer_html?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "galleries_select".
 */
export interface GalleriesSelect<T extends boolean = true> {
  name?: T;
  text?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                    showIcon?: T;
                    icon?:
                      | T
                      | {
                          source?: T;
                          color?: T;
                          size?: T;
                          name?: T;
                          upload?: T;
                        };
                  };
              id?: T;
            };
        alignContent?: T;
        media?: T;
        imageAnnotation?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        categoryShowcase?: T | CategoryShowcaseSelect<T>;
        contactSection?: T | ContactSectionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        faqBlock?:
          | T
          | {
              faqs?: T;
              animation?:
                | T
                | {
                    enabled?: T;
                    trigger?: T;
                    type?: T;
                    threshold?: T;
                    duration?: T;
                    delay?: T;
                  };
              id?: T;
              blockName?: T;
            };
        gallery?:
          | T
          | {
              title?: T;
              gallery?: T;
              animation?:
                | T
                | {
                    enabled?: T;
                    trigger?: T;
                    type?: T;
                    threshold?: T;
                    duration?: T;
                    delay?: T;
                  };
              id?: T;
              blockName?: T;
            };
        googleMap?: T | GoogleMapBlockSelect<T>;
        imageOverlayCTA?: T | ImageOverlayCTASelect<T>;
        imageWithTextBlock?: T | ImageWithTextBlockSelect<T>;
        logoCarouselBlock?: T | LogoCarouselSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        stepItemGrid?:
          | T
          | {
              items?:
                | T
                | {
                    richText?: T;
                    id?: T;
                  };
              animation?:
                | T
                | {
                    enabled?: T;
                    trigger?: T;
                    type?: T;
                    threshold?: T;
                    duration?: T;
                    delay?: T;
                  };
              id?: T;
              blockName?: T;
            };
        tabsBlock?:
          | T
          | {
              tabPosition?: T;
              initialTab?: T;
              allowUrlControls?: T;
              tabs?:
                | T
                | {
                    title?: T;
                    type?: T;
                    content?:
                      | T
                      | {
                          cta?: T | CallToActionBlockSelect<T>;
                          content?: T | ContentBlockSelect<T>;
                          faqBlock?:
                            | T
                            | {
                                faqs?: T;
                                animation?:
                                  | T
                                  | {
                                      enabled?: T;
                                      trigger?: T;
                                      type?: T;
                                      threshold?: T;
                                      duration?: T;
                                      delay?: T;
                                    };
                                id?: T;
                                blockName?: T;
                              };
                          gallery?:
                            | T
                            | {
                                title?: T;
                                gallery?: T;
                                animation?:
                                  | T
                                  | {
                                      enabled?: T;
                                      trigger?: T;
                                      type?: T;
                                      threshold?: T;
                                      duration?: T;
                                      delay?: T;
                                    };
                                id?: T;
                                blockName?: T;
                              };
                          imageWithTextBlock?: T | ImageWithTextBlockSelect<T>;
                          mediaBlock?: T | MediaBlockSelect<T>;
                          formBlock?: T | FormBlockSelect<T>;
                          stepItemGrid?:
                            | T
                            | {
                                items?:
                                  | T
                                  | {
                                      richText?: T;
                                      id?: T;
                                    };
                                animation?:
                                  | T
                                  | {
                                      enabled?: T;
                                      trigger?: T;
                                      type?: T;
                                      threshold?: T;
                                      duration?: T;
                                      delay?: T;
                                    };
                                id?: T;
                                blockName?: T;
                              };
                        };
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          appearance?: T;
                        };
                    id?: T;
                  };
              animation?:
                | T
                | {
                    enabled?: T;
                    trigger?: T;
                    type?: T;
                    threshold?: T;
                    duration?: T;
                    delay?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
              showIcon?: T;
              icon?:
                | T
                | {
                    source?: T;
                    color?: T;
                    size?: T;
                    name?: T;
                    upload?: T;
                  };
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categoryShowcase_select".
 */
export interface CategoryShowcaseSelect<T extends boolean = true> {
  category?: T;
  limit?: T;
  showTitle?: T;
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactSectionBlock_select".
 */
export interface ContactSectionBlockSelect<T extends boolean = true> {
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        contentType?: T;
        richText?: T;
        block?:
          | T
          | {
              contactSection?: T | ContactSectionBlockSelect<T>;
              formBlock?: T | FormBlockSelect<T>;
              googleMap?: T | GoogleMapBlockSelect<T>;
              imageLinkBlock?: T | ImageLinkBlockSelect<T>;
              imageWithTextOverlayBlock?: T | ImageWithTextOverlayBlockSelect<T>;
              infoCardBlock?: T | InfoCardBlockSelect<T>;
              mediaBlock?: T | MediaBlockSelect<T>;
              reviewCard?: T | ReviewCardSelect<T>;
              staffImageSpielBlock?: T | StaffImageSpielBlockSelect<T>;
              subscriptionPlanBlock?: T | SubscriptionPlanBlockSelect<T>;
              singleProduct?: T | SingleProductSelect<T>;
            };
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
              showIcon?: T;
              icon?:
                | T
                | {
                    source?: T;
                    color?: T;
                    size?: T;
                    name?: T;
                    upload?: T;
                  };
            };
        id?: T;
      };
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GoogleMapBlock_select".
 */
export interface GoogleMapBlockSelect<T extends boolean = true> {
  mapUrl?: T;
  height?: T;
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageLinkBlock_select".
 */
export interface ImageLinkBlockSelect<T extends boolean = true> {
  image?: T;
  text?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        appearance?: T;
      };
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageWithTextOverlayBlock_select".
 */
export interface ImageWithTextOverlayBlockSelect<T extends boolean = true> {
  image?: T;
  text?: T;
  callToAction?:
    | T
    | {
        text?: T;
        link?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InfoCardBlock_select".
 */
export interface InfoCardBlockSelect<T extends boolean = true> {
  icon?:
    | T
    | {
        source?: T;
        color?: T;
        size?: T;
        name?: T;
        upload?: T;
      };
  title?: T;
  text?: T;
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviewCard_select".
 */
export interface ReviewCardSelect<T extends boolean = true> {
  name?: T;
  rating?: T;
  reviewText?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "staffImageSpielBlock_select".
 */
export interface StaffImageSpielBlockSelect<T extends boolean = true> {
  name?: T;
  jobTitle?: T;
  image?: T;
  spiel?: T;
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SubscriptionPlanBlock_select".
 */
export interface SubscriptionPlanBlockSelect<T extends boolean = true> {
  subscriptionPlan?: T;
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "singleProduct_select".
 */
export interface SingleProductSelect<T extends boolean = true> {
  product?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageOverlayCTA_select".
 */
export interface ImageOverlayCTASelect<T extends boolean = true> {
  backgroundImage?: T;
  overlay?:
    | T
    | {
        title?: T;
        image?: T;
        text?: T;
      };
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
        appearance?: T;
        showIcon?: T;
        icon?:
          | T
          | {
              source?: T;
              color?: T;
              size?: T;
              name?: T;
              upload?: T;
            };
      };
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageWithTextBlock_select".
 */
export interface ImageWithTextBlockSelect<T extends boolean = true> {
  meta?:
    | T
    | {
        removeTitle?: T;
        flipImage?: T;
        primaryBackgroundColor?: T;
        containImage?: T;
      };
  title?: T;
  images?: T;
  text?: T;
  callToAction?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
        appearance?: T;
        showIcon?: T;
        icon?:
          | T
          | {
              source?: T;
              color?: T;
              size?: T;
              name?: T;
              upload?: T;
            };
      };
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogoCarousel_select".
 */
export interface LogoCarouselSelect<T extends boolean = true> {
  title?: T;
  alignTitle?: T;
  duration?: T;
  pauseOnHover?: T;
  images?: T;
  animation?:
    | T
    | {
        enabled?: T;
        trigger?: T;
        type?: T;
        threshold?: T;
        duration?: T;
        delay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  stripeCustomerId?: T;
  cart?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  name?: T;
  productType?: T;
  slug?: T;
  slugLock?: T;
  url?: T;
  primaryCategory?: T;
  categories?: T;
  introDescription?: T;
  description?: T;
  price?: T;
  stock?: T;
  images?: T;
  variants?:
    | T
    | {
        variantName?: T;
        sku?: T;
        price?: T;
        stock?: T;
        image?: T;
        id?: T;
      };
  specifications?:
    | T
    | {
        specs?:
          | T
          | {
              label?: T;
              value?: T;
              id?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  user?: T;
  email?: T;
  lineItems?:
    | T
    | {
        product?: T;
        productVariant?: T;
        quantity?: T;
        linePrice?: T;
        id?: T;
      };
  paymentStatus?: T;
  total?: T;
  paymentMethod?: T;
  paymentDate?: T;
  invoice?:
    | T
    | {
        url?: T;
        stripeId?: T;
        transactionId?: T;
      };
  orderRef?: T;
  address?:
    | T
    | {
        line1?: T;
        line2?: T;
        city?: T;
        postCode?: T;
      };
  discounts?:
    | T
    | {
        discountCode?: T;
        discountAmount?: T;
      };
  shipping?:
    | T
    | {
        trackingUrl?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discounts_select".
 */
export interface DiscountsSelect<T extends boolean = true> {
  code?: T;
  amount?: T;
  stripeCouponId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carts_select".
 */
export interface CartsSelect<T extends boolean = true> {
  customer?: T;
  lineItems?:
    | T
    | {
        product?: T;
        productVariant?: T;
        quantity?: T;
        linePrice?: T;
        id?: T;
      };
  total?: T;
  discountCode?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-categories_select".
 */
export interface ProductCategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  url?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-images_select".
 */
export interface ProductImagesSelect<T extends boolean = true> {
  text?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shipping_select".
 */
export interface ShippingSelect<T extends boolean = true> {
  name?: T;
  shippingDescription?: T;
  cost?: T;
  deliveryEstimate?: T;
  shippingRateId?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions_select".
 */
export interface SubscriptionsSelect<T extends boolean = true> {
  user?: T;
  plan?: T;
  startDate?: T;
  endDate?: T;
  stripeId?: T;
  status?: T;
  orders?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptionOrders_select".
 */
export interface SubscriptionOrdersSelect<T extends boolean = true> {
  user?: T;
  subscription?: T;
  paymentStatus?: T;
  amount?: T;
  paymentMethod?: T;
  paymentDate?: T;
  invoice?:
    | T
    | {
        url?: T;
        stripeId?: T;
        stripeSubscriptionId?: T;
        transactionId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plans_select".
 */
export interface PlansSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  description_html?: T;
  stripeDescription?: T;
  productId?: T;
  price?: T;
  stripePriceId?: T;
  billingCycle?: T;
  subscriptionTerm?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        itemType?: ('standard' | 'dropdown' | 'mega') | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null)
            | ({
                relationTo: 'product-categories';
                value: number | ProductCategory;
              } | null)
            | ({
                relationTo: 'products';
                value: number | Product;
              } | null);
          url?: string | null;
          label: string;
        };
        dropdown?: {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null)
              | ({
                  relationTo: 'product-categories';
                  value: number | ProductCategory;
                } | null)
              | ({
                  relationTo: 'products';
                  value: number | Product;
                } | null);
            url?: string | null;
            label: string;
          };
          children?:
            | {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: number | Page;
                      } | null)
                    | ({
                        relationTo: 'posts';
                        value: number | Post;
                      } | null)
                    | ({
                        relationTo: 'product-categories';
                        value: number | ProductCategory;
                      } | null)
                    | ({
                        relationTo: 'products';
                        value: number | Product;
                      } | null);
                  url?: string | null;
                  label: string;
                };
                id?: string | null;
              }[]
            | null;
        };
        mega?: {
          label?: string | null;
          children?:
            | {
                type?: ('standard' | 'group') | null;
                standard?: {
                  image?: (number | null) | Media;
                  link: {
                    type?: ('reference' | 'custom') | null;
                    newTab?: boolean | null;
                    reference?:
                      | ({
                          relationTo: 'pages';
                          value: number | Page;
                        } | null)
                      | ({
                          relationTo: 'posts';
                          value: number | Post;
                        } | null)
                      | ({
                          relationTo: 'product-categories';
                          value: number | ProductCategory;
                        } | null)
                      | ({
                          relationTo: 'products';
                          value: number | Product;
                        } | null);
                    url?: string | null;
                    label: string;
                  };
                  text?: string | null;
                };
                group?: {
                  image?: (number | null) | Media;
                  link: {
                    type?: ('reference' | 'custom') | null;
                    newTab?: boolean | null;
                    reference?:
                      | ({
                          relationTo: 'pages';
                          value: number | Page;
                        } | null)
                      | ({
                          relationTo: 'posts';
                          value: number | Post;
                        } | null)
                      | ({
                          relationTo: 'product-categories';
                          value: number | ProductCategory;
                        } | null)
                      | ({
                          relationTo: 'products';
                          value: number | Product;
                        } | null);
                    url?: string | null;
                    label: string;
                  };
                  children?:
                    | {
                        link: {
                          type?: ('reference' | 'custom') | null;
                          newTab?: boolean | null;
                          reference?:
                            | ({
                                relationTo: 'pages';
                                value: number | Page;
                              } | null)
                            | ({
                                relationTo: 'posts';
                                value: number | Post;
                              } | null)
                            | ({
                                relationTo: 'product-categories';
                                value: number | ProductCategory;
                              } | null)
                            | ({
                                relationTo: 'products';
                                value: number | Product;
                              } | null);
                          url?: string | null;
                          label: string;
                        };
                        id?: string | null;
                      }[]
                    | null;
                };
                id?: string | null;
              }[]
            | null;
        };
        id?: string | null;
      }[]
    | null;
  notificationsBar?: {
    enable?: boolean | null;
    /**
     * This text will be displayed in the center of the notifications bar.
     */
    text?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  settings?: {
    header?: {
      /**
       * Makes the header stick to the top of the page.
       */
      sticky?: boolean | null;
      /**
       * Hides the header when scrolling down and shows it when scrolling up.
       */
      hideOnScrollDown?: boolean | null;
      /**
       * If enabled the header will be shown when hovering over the top of the page.
       */
      isHovering?: boolean | null;
    };
    showPhone?: boolean | null;
    showEmail?: boolean | null;
    showSocials?: boolean | null;
    showCart?: boolean | null;
    showUser?: boolean | null;
    showSearch?: boolean | null;
    showCTA?: boolean | null;
    callToAction?: {
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?:
          | ({
              relationTo: 'pages';
              value: number | Page;
            } | null)
          | ({
              relationTo: 'posts';
              value: number | Post;
            } | null)
          | ({
              relationTo: 'product-categories';
              value: number | ProductCategory;
            } | null)
          | ({
              relationTo: 'products';
              value: number | Product;
            } | null);
        url?: string | null;
        label: string;
        /**
         * Choose how the link should be rendered.
         */
        appearance?: ('default' | 'secondary' | 'dark' | 'outline') | null;
        showIcon?: boolean | null;
        icon?: {
          source?: ('lucide' | 'upload') | null;
          color?: string | null;
          size?: number | null;
          name?: string | null;
          upload?: (number | null) | Media;
        };
      };
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  columns?:
    | {
        columnType?: ('rows' | 'logo' | 'menu' | 'cta') | null;
        rows?:
          | {
              rowType?: ('text' | 'Logo' | 'location' | 'contact' | 'openingHours') | null;
              text?: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              id?: string | null;
            }[]
          | null;
        menuType?: ('custom' | 'contact') | null;
        menuTitle?: string | null;
        navItems?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: number | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: number | Post;
                    } | null)
                  | ({
                      relationTo: 'product-categories';
                      value: number | ProductCategory;
                    } | null)
                  | ({
                      relationTo: 'products';
                      value: number | Product;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        cta?: {
          title: string;
          text: string;
          button: {
            text: string;
            link: {
              type?: ('reference' | 'custom') | null;
              newTab?: boolean | null;
              reference?:
                | ({
                    relationTo: 'pages';
                    value: number | Page;
                  } | null)
                | ({
                    relationTo: 'posts';
                    value: number | Post;
                  } | null)
                | ({
                    relationTo: 'product-categories';
                    value: number | ProductCategory;
                  } | null)
                | ({
                    relationTo: 'products';
                    value: number | Product;
                  } | null);
              url?: string | null;
              label: string;
            };
          };
        };
        id?: string | null;
      }[]
    | null;
  footerMeta?: {
    left?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    right?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: number;
  businessAddress?: string | null;
  openingHours?:
    | {
        day: 'mon-fri' | 'weekend' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
        openTime: string;
        closeTime: string;
        id?: string | null;
      }[]
    | null;
  /**
   * This is the logo that will be used on dark backgrounds.
   */
  logoLight?: (number | null) | Media;
  /**
   * This is the logo that will be used on light backgrounds.
   */
  logoDark?: (number | null) | Media;
  logoWidth?: number | null;
  logoHeight?: number | null;
  favicon?: (number | null) | Media;
  email?: string | null;
  phoneNumber?: string | null;
  socials?: {
    /**
     * Just your username is required
     */
    facebook?: string | null;
    /**
     * Just your username is required
     */
    instagram?: string | null;
    /**
     * Just your number is required
     */
    whatsapp?: string | null;
    /**
     * Just your username is required
     */
    twitter?: string | null;
    /**
     * Just your username is required
     */
    tiktok?: string | null;
    /**
     * Just your username is required
     */
    linkedin?: string | null;
    /**
     * Just your username is required
     */
    pinterest?: string | null;
    /**
     * Just your username is required
     */
    youtube?: string | null;
  };
  googleAnalytics?: string | null;
  googleTag?: string | null;
  facebookPixel?: string | null;
  enableEcommerce?: boolean | null;
  /**
   * Allow customers to create an account (defaults to customer role)
   */
  allowAccountCreation?: boolean | null;
  cartStyle?: ('popup' | 'page') | null;
  enableMaintenanceMode?: boolean | null;
  maintenancePassword?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        itemType?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        dropdown?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              children?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    id?: T;
                  };
            };
        mega?:
          | T
          | {
              label?: T;
              children?:
                | T
                | {
                    type?: T;
                    standard?:
                      | T
                      | {
                          image?: T;
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                              };
                          text?: T;
                        };
                    group?:
                      | T
                      | {
                          image?: T;
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                              };
                          children?:
                            | T
                            | {
                                link?:
                                  | T
                                  | {
                                      type?: T;
                                      newTab?: T;
                                      reference?: T;
                                      url?: T;
                                      label?: T;
                                    };
                                id?: T;
                              };
                        };
                    id?: T;
                  };
            };
        id?: T;
      };
  notificationsBar?:
    | T
    | {
        enable?: T;
        text?: T;
      };
  settings?:
    | T
    | {
        header?:
          | T
          | {
              sticky?: T;
              hideOnScrollDown?: T;
              isHovering?: T;
            };
        showPhone?: T;
        showEmail?: T;
        showSocials?: T;
        showCart?: T;
        showUser?: T;
        showSearch?: T;
        showCTA?: T;
        callToAction?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                    showIcon?: T;
                    icon?:
                      | T
                      | {
                          source?: T;
                          color?: T;
                          size?: T;
                          name?: T;
                          upload?: T;
                        };
                  };
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        columnType?: T;
        rows?:
          | T
          | {
              rowType?: T;
              text?: T;
              id?: T;
            };
        menuType?: T;
        menuTitle?: T;
        navItems?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        cta?:
          | T
          | {
              title?: T;
              text?: T;
              button?:
                | T
                | {
                    text?: T;
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                  };
            };
        id?: T;
      };
  footerMeta?:
    | T
    | {
        left?: T;
        right?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  businessAddress?: T;
  openingHours?:
    | T
    | {
        day?: T;
        openTime?: T;
        closeTime?: T;
        id?: T;
      };
  logoLight?: T;
  logoDark?: T;
  logoWidth?: T;
  logoHeight?: T;
  favicon?: T;
  email?: T;
  phoneNumber?: T;
  socials?:
    | T
    | {
        facebook?: T;
        instagram?: T;
        whatsapp?: T;
        twitter?: T;
        tiktok?: T;
        linkedin?: T;
        pinterest?: T;
        youtube?: T;
      };
  googleAnalytics?: T;
  googleTag?: T;
  facebookPixel?: T;
  enableEcommerce?: T;
  allowAccountCreation?: T;
  cartStyle?: T;
  enableMaintenanceMode?: T;
  maintenancePassword?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}